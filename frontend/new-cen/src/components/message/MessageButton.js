import React, { useState } from 'react';

import Button from 'react-bootstrap/Button';
import Form from 'react-bootstrap/Form';
import Modal from 'react-bootstrap/Modal';

import { BASE_URL, MESSAGE } from '../common/config/host-config';
import { getToken } from '../common/util/login-util';

import './css/MessageButton.css';

// Î©îÏÑ∏ÏßÄ Î≤ÑÌäº
const MessageButton = ({changeMode, handleDeleteMessage}) => {

    const API_BASE_URL = BASE_URL + MESSAGE;
    const ACCESS_TOKEN = getToken();

    const headerInfo = {
        'content-type' : 'application/json',
        'Authorization': 'Bearer ' + ACCESS_TOKEN
    }

    const [modal, setModal] = useState(false); 


    // Î™®Îã¨ Îã´Í∏∞
    const handleClose = () => {
        setModal(false);
        setSearchReceiverList([]);
        setReceiverList([]);
    };

    // ÏÇ≠Ï†ú ÌÅ¥Î¶≠ Ïãú Í≤ΩÍ≥† Î™®Îã¨
    const handleSendModal = () => {
        setModal(true);     // Î™®Îã¨ Ïó¥Í∏∞
    }

    // Ïã§ÏãúÍ∞Ñ ÌöåÏõê Í≤ÄÏÉâ Î™©Î°ù
    const [searchReceiverList, setSearchReceiverList] = useState([]);

    // Î©îÏÑ∏ÏßÄ ÏàòÏã†Ïù∏ Î¶¨Ïä§Ìä∏
    const [receiverList, setReceiverList] = useState([]);

    // Ïã§ÏãúÍ∞Ñ Í≤ÄÏÉâ
    const handleSearchReceiver = (e) => {

        fetch(API_BASE_URL+"/receiver?username="+e.target.value, {
            headers: headerInfo,
        })
        .then(res => res.json())
        .then(res => {
            if(!!res) {
                setSearchReceiverList(res);
            }
        })
    }


    // ÏÑ†ÌÉùÎêú ÏàòÏã†Ïù∏ Î™©Î°ù
    const receiverListContainer = document.querySelector('#message_receiver_list');

    // ÏàòÏã†Ïù∏ Ï∂îÍ∞Ä
    const handleAddReceiver = (userId, userName, e) => {

        let addable = true;

        receiverList.forEach((receiver) => {
            if(receiver === userId) {
                addable = false;
                return;
            }
        })

        if(addable) {
            receiverListContainer.innerHTML += 
            `<button type='button' class='receiver_button' id=${userId}>${userName}</button>`
            setReceiverList([
                ...receiverList, 
                userId
            ]);
        }
    }


    const deleteReceiver = (e) => {

            setReceiverList(receiverList.filter(
                (userId) => userId !== e.target.id
            ));
            
            e.target.remove();
    }

    // Î©îÏÑ∏ÏßÄ Î≥¥ÎÇ¥Í∏∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨

    const [messageValid, setMessageValid] = useState({
        title: false,
        content: false
    });

    const [message, setMessage] = useState({
        messageTitle: '',
        messageContent: ''
    });
    
    const saveTitle = (e) => {

        if(!e.target.value) {
            setMessageValid({
                ...messageValid,
                title: false
            })
        }else if(e.target.value.trim() === '') {
            setMessageValid({
                ...messageValid,
                title: false
            })
        }else {
            setMessageValid({
                ...messageValid,
                title: true
            })
        }

        setMessage({
            ...message,
            messageTitle: e.target.value
        })
    }

    const saveContent = (e) => {

        if(!e.target.value) {
            setMessageValid({
                ...messageValid,
                content: false
            })
        }else if(e.target.value.trim() === '') {
            setMessageValid({
                ...messageValid,
                content: false
            })
        }else {
            setMessageValid({
                ...messageValid,
                content: true
            })
        }

        setMessage({
            ...message,
            messageContent: e.target.value
        })
    }
   
    // Î©îÏÑ∏ÏßÄ Î≥¥ÎÇ¥Í∏∞ Î≤ÑÌäº
    const handleSendMessage = () => {
  
        if(receiverList.length===0) {
            alert("ÏµúÏÜå ÌïúÎ™ÖÏùò ÏàòÏã†Ïù∏ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî");
            return;
        }else if(!messageValid.title) {
            alert("Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî");
            return;
        }else if(!messageValid.content) {
            alert('ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî');
            return;
        }else {
            fetch(`${API_BASE_URL}?receiverList=${receiverList}`, {
                method: 'POST',
                headers: headerInfo,
                body: JSON.stringify(message)
            })
            .then(res => {
                if(res.status === 400) {
                    alert("ÏûòÎ™ªÎêú ÏöîÏ≤≠ Í∞í ÏûÖÎãàÎã§")
                    return; 
                }else if(res.status === 401) {
                    alert("ÏÑ∏ÏÖòÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§")
                    window.location.href = "/";
                }else if(res.status === 404) {
                    alert("ÏàòÏã†Ïù∏ Î™©Î°ùÏùÑ Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî");
                    return;
                }
                
                return res.json();
            })
            .then(res => {
                if(res) {
                    alert("Î©îÏÑ∏ÏßÄÎ•º Ï†ÑÏÜ°ÌñàÏäµÎãàÎã§üòä");
                    handleClose();
                    changeMode('sent');
                }
            })
        }
    }

   

    return (
        <>
            <div className='justify'>
                <div id='message_button_txt'>Î©îÏÑ∏ÏßÄ</div>
                <div id='message_button_group'>
                    <Button className='btn_indigo' id='message_button_sent' onClick={() => changeMode('sent')}>Î≥¥ÎÇ∏ Î©îÏÑ∏ÏßÄ</Button>
                    <Button className='btn_indigo' id='message_button_reception' onClick={() => changeMode('received')}>Î∞õÏùÄ Î©îÏÑ∏ÏßÄ</Button>
                    <Button className='btn_indigo' id='message_button_select_delete' onClick={handleDeleteMessage}>ÏÑ†ÌÉù ÏÇ≠Ï†ú</Button>
                    <Button onClick={handleSendModal} className='btn_orange' id='message_button_send'>Î©îÏÑ∏ÏßÄ Î≥¥ÎÇ¥Í∏∞</Button>
                </div>
            </div> 

            {/* Modal */}
            <Modal show={modal} onHide={handleClose} id="message_send_modal">
                <Modal.Body>
                    <div id='message_send_modal_body'>
                        <Form.Group className='mb-3'>
                            <Form.Label id='message_form_label'>Î∞õÎäî ÏÇ¨Îûå</Form.Label>
                            <Form.Control autoFocus type='text' className='message_form_control' placeholder='Î∞õÎäî ÏÇ¨Îûå' id='message_receiver' onChange={handleSearchReceiver}/>
                            <div className='message_form_control' id='message_receiver_list' disabled onClick={deleteReceiver}>
                            </div>

                            <div id="receiver_list_container">
                                { searchReceiverList && searchReceiverList.map((item) => {
                                    return (
                                        <div key={item.userId} className="receiver_list_option" onClick={(e) => handleAddReceiver(item.userId, item.userName, e)}>
                                            <span>{item.userName}({item.userEmail})</span>
                                        </div>
                                    )
                                })}
                            </div> 
                        </Form.Group>
                        <Form.Group className='mb-3'>
                            <Form.Label id='message_form_label'>Ï†úÎ™©</Form.Label>
                            <Form.Control type='text' className='message_form_control' placeholder='Ï†úÎ™©' id='message_title' onChange={saveTitle}/>
                        </Form.Group>
                        <Form.Group className='mb-3'>
                            <Form.Label id='message_form_label'>ÎÇ¥Ïö©</Form.Label>
                            <textarea rows="5" className="form-control" id='message_content' onChange={saveContent}/>
                        </Form.Group>
                    </div>

                    <div id='message_send_modal_footer'>
                        <Button className='btn_gray notice_btn btn_size_100' onClick={handleClose}>
                            Ï∑®ÏÜå
                        </Button>
                        <Button className='btn_orange notice_btn btn_size_100' id="notice_content_delete_btn" onClick={handleSendMessage}>
                            Î≥¥ÎÇ¥Í∏∞
                        </Button>
                    </div>
                </Modal.Body>
            </Modal>
        </>    
    )
}

export default MessageButton